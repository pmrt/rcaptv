//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	UserID          postgres.ColumnInteger
	TwitchUserID    postgres.ColumnString
	Username        postgres.ColumnString
	DisplayUsername postgres.ColumnString
	Email           postgres.ColumnString
	PpURL           postgres.ColumnString
	IsPaidUser      postgres.ColumnBool
	IsVip           postgres.ColumnBool
	LastPaymentAt   postgres.ColumnTimestamp
	BcType          postgres.ColumnString
	LastLoginAt     postgres.ColumnTimestamp
	CreatedAt       postgres.ColumnTimestamp
	TwitchCreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		UserIDColumn          = postgres.IntegerColumn("user_id")
		TwitchUserIDColumn    = postgres.StringColumn("twitch_user_id")
		UsernameColumn        = postgres.StringColumn("username")
		DisplayUsernameColumn = postgres.StringColumn("display_username")
		EmailColumn           = postgres.StringColumn("email")
		PpURLColumn           = postgres.StringColumn("pp_url")
		IsPaidUserColumn      = postgres.BoolColumn("is_paid_user")
		IsVipColumn           = postgres.BoolColumn("is_vip")
		LastPaymentAtColumn   = postgres.TimestampColumn("last_payment_at")
		BcTypeColumn          = postgres.StringColumn("bc_type")
		LastLoginAtColumn     = postgres.TimestampColumn("last_login_at")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		TwitchCreatedAtColumn = postgres.TimestampColumn("twitch_created_at")
		allColumns            = postgres.ColumnList{UserIDColumn, TwitchUserIDColumn, UsernameColumn, DisplayUsernameColumn, EmailColumn, PpURLColumn, IsPaidUserColumn, IsVipColumn, LastPaymentAtColumn, BcTypeColumn, LastLoginAtColumn, CreatedAtColumn, TwitchCreatedAtColumn}
		mutableColumns        = postgres.ColumnList{TwitchUserIDColumn, UsernameColumn, DisplayUsernameColumn, EmailColumn, PpURLColumn, IsPaidUserColumn, IsVipColumn, LastPaymentAtColumn, BcTypeColumn, LastLoginAtColumn, CreatedAtColumn, TwitchCreatedAtColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:          UserIDColumn,
		TwitchUserID:    TwitchUserIDColumn,
		Username:        UsernameColumn,
		DisplayUsername: DisplayUsernameColumn,
		Email:           EmailColumn,
		PpURL:           PpURLColumn,
		IsPaidUser:      IsPaidUserColumn,
		IsVip:           IsVipColumn,
		LastPaymentAt:   LastPaymentAtColumn,
		BcType:          BcTypeColumn,
		LastLoginAt:     LastLoginAtColumn,
		CreatedAt:       CreatedAtColumn,
		TwitchCreatedAt: TwitchCreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
