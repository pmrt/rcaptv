//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TrackedChannels = newTrackedChannelsTable("public", "tracked_channels", "")

type trackedChannelsTable struct {
	postgres.Table

	// Columns
	BcID               postgres.ColumnString
	BcDisplayName      postgres.ColumnString
	BcUsername         postgres.ColumnString
	BcType             postgres.ColumnString
	PpURL              postgres.ColumnString
	OfflinePpURL       postgres.ColumnString
	TrackedSince       postgres.ColumnTimestamp
	SeenInactiveCount  postgres.ColumnInteger
	EnabledStatus      postgres.ColumnBool
	LastModifiedStatus postgres.ColumnTimestamp
	PriorityLvl        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TrackedChannelsTable struct {
	trackedChannelsTable

	EXCLUDED trackedChannelsTable
}

// AS creates new TrackedChannelsTable with assigned alias
func (a TrackedChannelsTable) AS(alias string) *TrackedChannelsTable {
	return newTrackedChannelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TrackedChannelsTable with assigned schema name
func (a TrackedChannelsTable) FromSchema(schemaName string) *TrackedChannelsTable {
	return newTrackedChannelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TrackedChannelsTable with assigned table prefix
func (a TrackedChannelsTable) WithPrefix(prefix string) *TrackedChannelsTable {
	return newTrackedChannelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TrackedChannelsTable with assigned table suffix
func (a TrackedChannelsTable) WithSuffix(suffix string) *TrackedChannelsTable {
	return newTrackedChannelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTrackedChannelsTable(schemaName, tableName, alias string) *TrackedChannelsTable {
	return &TrackedChannelsTable{
		trackedChannelsTable: newTrackedChannelsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newTrackedChannelsTableImpl("", "excluded", ""),
	}
}

func newTrackedChannelsTableImpl(schemaName, tableName, alias string) trackedChannelsTable {
	var (
		BcIDColumn               = postgres.StringColumn("bc_id")
		BcDisplayNameColumn      = postgres.StringColumn("bc_display_name")
		BcUsernameColumn         = postgres.StringColumn("bc_username")
		BcTypeColumn             = postgres.StringColumn("bc_type")
		PpURLColumn              = postgres.StringColumn("pp_url")
		OfflinePpURLColumn       = postgres.StringColumn("offline_pp_url")
		TrackedSinceColumn       = postgres.TimestampColumn("tracked_since")
		SeenInactiveCountColumn  = postgres.IntegerColumn("seen_inactive_count")
		EnabledStatusColumn      = postgres.BoolColumn("enabled_status")
		LastModifiedStatusColumn = postgres.TimestampColumn("last_modified_status")
		PriorityLvlColumn        = postgres.IntegerColumn("priority_lvl")
		allColumns               = postgres.ColumnList{BcIDColumn, BcDisplayNameColumn, BcUsernameColumn, BcTypeColumn, PpURLColumn, OfflinePpURLColumn, TrackedSinceColumn, SeenInactiveCountColumn, EnabledStatusColumn, LastModifiedStatusColumn, PriorityLvlColumn}
		mutableColumns           = postgres.ColumnList{BcDisplayNameColumn, BcUsernameColumn, BcTypeColumn, PpURLColumn, OfflinePpURLColumn, TrackedSinceColumn, SeenInactiveCountColumn, EnabledStatusColumn, LastModifiedStatusColumn, PriorityLvlColumn}
	)

	return trackedChannelsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		BcID:               BcIDColumn,
		BcDisplayName:      BcDisplayNameColumn,
		BcUsername:         BcUsernameColumn,
		BcType:             BcTypeColumn,
		PpURL:              PpURLColumn,
		OfflinePpURL:       OfflinePpURLColumn,
		TrackedSince:       TrackedSinceColumn,
		SeenInactiveCount:  SeenInactiveCountColumn,
		EnabledStatus:      EnabledStatusColumn,
		LastModifiedStatus: LastModifiedStatusColumn,
		PriorityLvl:        PriorityLvlColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
